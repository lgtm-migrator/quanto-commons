'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _helpers = require('./helpers');

/**
 * Created by Lucas Teske on 07/09/18.
 * 
 */

var serializeFingerPrint = function serializeFingerPrint(value) {
  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value;

  if (typeof Buffer !== 'undefined' && result instanceof Buffer) {
    return result.toString('hex').toUpperCase();
  }

  if (typeof ArrayBuffer !== 'undefined' && (result instanceof ArrayBuffer || result instanceof Uint8Array)) {
    return (0, _helpers.uint8arr2hex)(new Uint8Array(result));
  }

  if (typeof result === 'string') {
    if (!_helpers.validateHex.test(result)) {
      throw new TypeError('Fingerprint cannot represent value: ' + value);
    }
    return result.toUpperCase();
  }

  if ((0, _helpers.isFinite)(result)) {
    return result.toString(16).toUpperCase();
  }

  throw new TypeError('Fingerprint cannot represent value: ' + JSON.stringify(value));
};

var coerceFingerPrint = function coerceFingerPrint(value) {
  if ((0, _helpers.isInteger)(value)) {
    return value.toString(16).toUpperCase();
  }

  if (typeof value !== 'string') {
    throw new TypeError('String cannot represent a non string / hexadecimal / integer value: ' + JSON.stringify(value));
  } else if (!_helpers.validateHex.test(value)) {
    throw new TypeError('String cannot represent a non string / hexadecimal / integer value: ' + value);
  }

  return value.toString().toUpperCase();
};

var parseAstFingerprint = function parseAstFingerprint(ast) {
  switch (ast.kind) {
    case _graphql.Kind.STRING:
      return ast.value;
    case _graphql.Kind.INT:
      return parseInt(ast.value, 10);
    default:
      return undefined;
  }
};

exports.default = new _graphql.GraphQLScalarType({
  name: 'FingerPrint',
  description: 'The `FingerPrint` scalar type represents a Key FingerPrint data, represented as uppercase HEX' + 'character sequences.',
  serialize: serializeFingerPrint,
  parseValue: coerceFingerPrint,
  parseLiteral: parseAstFingerprint
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvR1FMVHlwZXMvZmluZ2VycHJpbnQuanMiXSwibmFtZXMiOlsic2VyaWFsaXplRmluZ2VyUHJpbnQiLCJ2YWx1ZSIsInJlc3VsdCIsInZhbHVlT2YiLCJCdWZmZXIiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwiQXJyYXlCdWZmZXIiLCJVaW50OEFycmF5IiwidmFsaWRhdGVIZXgiLCJ0ZXN0IiwiVHlwZUVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvZXJjZUZpbmdlclByaW50IiwicGFyc2VBc3RGaW5nZXJwcmludCIsImFzdCIsImtpbmQiLCJLaW5kIiwiU1RSSU5HIiwiSU5UIiwicGFyc2VJbnQiLCJ1bmRlZmluZWQiLCJHcmFwaFFMU2NhbGFyVHlwZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInNlcmlhbGl6ZSIsInBhcnNlVmFsdWUiLCJwYXJzZUxpdGVyYWwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBOztBQUtBOztBQVZBOzs7OztBQWlCQSxJQUFNQSx1QkFBdUIsU0FBdkJBLG9CQUF1QixDQUFDQyxLQUFELEVBQWtCO0FBQzdDLE1BQU1DLFNBQVNELFNBQVMsT0FBT0EsTUFBTUUsT0FBYixLQUF5QixVQUFsQyxHQUErQ0YsTUFBTUUsT0FBTixFQUEvQyxHQUFpRUYsS0FBaEY7O0FBRUEsTUFBSSxPQUFPRyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDRixrQkFBa0JFLE1BQXZELEVBQStEO0FBQzdELFdBQU9GLE9BQU9HLFFBQVAsQ0FBZ0IsS0FBaEIsRUFBdUJDLFdBQXZCLEVBQVA7QUFDRDs7QUFFRCxNQUFJLE9BQU9DLFdBQVAsS0FBdUIsV0FBdkIsS0FBdUNMLGtCQUFrQkssV0FBbEIsSUFBaUNMLGtCQUFrQk0sVUFBMUYsQ0FBSixFQUEyRztBQUN6RyxXQUFPLDJCQUFhLElBQUlBLFVBQUosQ0FBZU4sTUFBZixDQUFiLENBQVA7QUFDRDs7QUFFRCxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUIsUUFBSSxDQUFDTyxxQkFBWUMsSUFBWixDQUFpQlIsTUFBakIsQ0FBTCxFQUErQjtBQUM3QixZQUFNLElBQUlTLFNBQUosMENBQXFEVixLQUFyRCxDQUFOO0FBQ0Q7QUFDRCxXQUFPQyxPQUFPSSxXQUFQLEVBQVA7QUFDRDs7QUFFRCxNQUFJLHVCQUFTSixNQUFULENBQUosRUFBc0I7QUFDcEIsV0FBT0EsT0FBT0csUUFBUCxDQUFnQixFQUFoQixFQUFvQkMsV0FBcEIsRUFBUDtBQUNEOztBQUVELFFBQU0sSUFBSUssU0FBSiwwQ0FBcURDLEtBQUtDLFNBQUwsQ0FBZVosS0FBZixDQUFyRCxDQUFOO0FBQ0QsQ0F2QkQ7O0FBeUJBLElBQU1hLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQUNiLEtBQUQsRUFBMkI7QUFDbkQsTUFBSSx3QkFBVUEsS0FBVixDQUFKLEVBQXNCO0FBQ3BCLFdBQU9BLE1BQU1JLFFBQU4sQ0FBZSxFQUFmLEVBQW1CQyxXQUFuQixFQUFQO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPTCxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCLFVBQU0sSUFBSVUsU0FBSiwwRUFBcUZDLEtBQUtDLFNBQUwsQ0FBZVosS0FBZixDQUFyRixDQUFOO0FBQ0QsR0FGRCxNQUVPLElBQUksQ0FBQ1EscUJBQVlDLElBQVosQ0FBaUJULEtBQWpCLENBQUwsRUFBOEI7QUFDbkMsVUFBTSxJQUFJVSxTQUFKLDBFQUFxRlYsS0FBckYsQ0FBTjtBQUNEOztBQUVELFNBQU9BLE1BQU1JLFFBQU4sR0FBaUJDLFdBQWpCLEVBQVA7QUFDRCxDQVpEOztBQWNBLElBQU1TLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNDLEdBQUQsRUFBUztBQUNuQyxVQUFRQSxJQUFJQyxJQUFaO0FBQ0UsU0FBS0MsY0FBS0MsTUFBVjtBQUFrQixhQUFPSCxJQUFJZixLQUFYO0FBQ2xCLFNBQUtpQixjQUFLRSxHQUFWO0FBQWUsYUFBT0MsU0FBU0wsSUFBSWYsS0FBYixFQUFvQixFQUFwQixDQUFQO0FBQ2Y7QUFBUyxhQUFPcUIsU0FBUDtBQUhYO0FBS0QsQ0FORDs7a0JBUWUsSUFBSUMsMEJBQUosQ0FBc0I7QUFDbkNDLFFBQU0sYUFENkI7QUFFbkNDLGVBQ0Esa0dBQ0Esc0JBSm1DO0FBS25DQyxhQUFXMUIsb0JBTHdCO0FBTW5DMkIsY0FBWWIsaUJBTnVCO0FBT25DYyxnQkFBY2I7QUFQcUIsQ0FBdEIsQyIsImZpbGUiOiJmaW5nZXJwcmludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBMdWNhcyBUZXNrZSBvbiAwNy8wOS8xOC5cbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHtcbiAgR3JhcGhRTFNjYWxhclR5cGUsXG4gIEtpbmQsXG59IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQge1xuICBpc0Zpbml0ZSxcbiAgaXNJbnRlZ2VyLFxuICB1aW50OGFycjJoZXgsXG4gIHZhbGlkYXRlSGV4LFxufSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBzZXJpYWxpemVGaW5nZXJQcmludCA9ICh2YWx1ZTogbWl4ZWQpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcblxuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVzdWx0IGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgcmV0dXJuIHJlc3VsdC50b1N0cmluZygnaGV4JykudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIChyZXN1bHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCByZXN1bHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgIHJldHVybiB1aW50OGFycjJoZXgobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbGlkYXRlSGV4LnRlc3QocmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRmluZ2VycHJpbnQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgaWYgKGlzRmluaXRlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gcmVzdWx0LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRmluZ2VycHJpbnQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG59O1xuXG5jb25zdCBjb2VyY2VGaW5nZXJQcmludCA9ICh2YWx1ZTogbWl4ZWQpIDogc3RyaW5nID0+IHtcbiAgaWYgKGlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFN0cmluZyBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIHN0cmluZyAvIGhleGFkZWNpbWFsIC8gaW50ZWdlciB2YWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkYXRlSGV4LnRlc3QodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgU3RyaW5nIGNhbm5vdCByZXByZXNlbnQgYSBub24gc3RyaW5nIC8gaGV4YWRlY2ltYWwgLyBpbnRlZ2VyIHZhbHVlOiAke3ZhbHVlfWApO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKTtcbn07XG5cbmNvbnN0IHBhcnNlQXN0RmluZ2VycHJpbnQgPSAoYXN0KSA9PiB7XG4gIHN3aXRjaCAoYXN0LmtpbmQpIHtcbiAgICBjYXNlIEtpbmQuU1RSSU5HOiByZXR1cm4gYXN0LnZhbHVlO1xuICAgIGNhc2UgS2luZC5JTlQ6IHJldHVybiBwYXJzZUludChhc3QudmFsdWUsIDEwKTtcbiAgICBkZWZhdWx0OiByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnRmluZ2VyUHJpbnQnLFxuICBkZXNjcmlwdGlvbjpcbiAgJ1RoZSBgRmluZ2VyUHJpbnRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgYSBLZXkgRmluZ2VyUHJpbnQgZGF0YSwgcmVwcmVzZW50ZWQgYXMgdXBwZXJjYXNlIEhFWCcgK1xuICAnY2hhcmFjdGVyIHNlcXVlbmNlcy4nLFxuICBzZXJpYWxpemU6IHNlcmlhbGl6ZUZpbmdlclByaW50LFxuICBwYXJzZVZhbHVlOiBjb2VyY2VGaW5nZXJQcmludCxcbiAgcGFyc2VMaXRlcmFsOiBwYXJzZUFzdEZpbmdlcnByaW50LFxufSk7XG4iXX0=