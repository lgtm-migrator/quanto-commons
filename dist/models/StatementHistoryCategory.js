'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.codeToCategory = exports.StatementHistoryCategoryEnumGraphQL = exports.StatementHistoryCategoryEnum = exports.StatementHistoryCategoryGroup = undefined;

var _graphql = require('graphql');

var _tools = require('../tools');

var _StatementHistoryCode = require('./StatementHistoryCode');

var StatementHistoryCategoryEnum = {
  Other: {
    value: 0,
    description: 'Others (see statement description)'
  },
  InternalTransfer: {
    value: 1,
    description: 'Account Balance Transfers in same bank'
  },
  ExternalTransfer: {
    value: 2,
    description: 'Account Balance Transfers in different banks'
  },
  PaymentAndBilling: {
    value: 3,
    description: 'Payment / Billing Transactions'
  },
  ATM: {
    value: 4,
    description: 'ATM Transactions'
  },
  Escrow: {
    value: 5,
    description: 'Escrow Transactions'
  },
  Fee: {
    value: 6,
    description: 'Fee Transactions'
  }
}; /**
    * Created by Lucas Teske on 29/03/18.
    * 
    */


var StatementHistoryCategoryEnumGraphQL = new _graphql.GraphQLEnumType({
  name: 'StatementHistoryCategoryEnum',
  description: 'Statement History Category Enum',
  values: StatementHistoryCategoryEnum
});

var StatementHistoryCategoryGroup = {};

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.Other.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.Other.value, _StatementHistoryCode.StatementHistoryCodeEnum.BankCredit.value, _StatementHistoryCode.StatementHistoryCodeEnum.BankDebit.value];

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.InternalTransfer.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.LocalIn.value, _StatementHistoryCode.StatementHistoryCodeEnum.LocalOut.value];

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.ExternalTransfer.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.ExternalIn.value, _StatementHistoryCode.StatementHistoryCodeEnum.ExternalOut.value, _StatementHistoryCode.StatementHistoryCodeEnum.ExternalRefund.value];

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.PaymentAndBilling.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.PaymentOut.value, _StatementHistoryCode.StatementHistoryCodeEnum.PaymentRefund.value, _StatementHistoryCode.StatementHistoryCodeEnum.BoletoIn.value, _StatementHistoryCode.StatementHistoryCodeEnum.CronOut.value];

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.ATM.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.AtmOut.value];

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.Escrow.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.EscrowLock.value, _StatementHistoryCode.StatementHistoryCodeEnum.EscrowUnlock.value, _StatementHistoryCode.StatementHistoryCodeEnum.EscrowIn.value, _StatementHistoryCode.StatementHistoryCodeEnum.EscrowOut.value];

StatementHistoryCategoryGroup[StatementHistoryCategoryEnum.Fee.value] = [_StatementHistoryCode.StatementHistoryCodeEnum.OtherFees.value, _StatementHistoryCode.StatementHistoryCodeEnum.FeeRefund.value, _StatementHistoryCode.StatementHistoryCodeEnum.BoletoFee.value];

var codeToCategory = function codeToCategory(code) {
  var category = StatementHistoryCategoryEnum.Other.value;

  Object.keys(StatementHistoryCategoryEnum).forEach(function (catName) {
    var cat = StatementHistoryCategoryEnum[catName];
    if (!(0, _tools.undefinedOrNull)(StatementHistoryCategoryGroup[cat.value]) && StatementHistoryCategoryGroup[cat.value].indexOf(code) !== -1) {
      category = cat.value;
    }
  });

  return category;
};

exports.StatementHistoryCategoryGroup = StatementHistoryCategoryGroup;
exports.StatementHistoryCategoryEnum = StatementHistoryCategoryEnum;
exports.StatementHistoryCategoryEnumGraphQL = StatementHistoryCategoryEnumGraphQL;
exports.codeToCategory = codeToCategory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,