'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Created by Lucas Teske on 18/05/18.
 * 
 */

// Colors based off colors.js https://github.com/Marak/colors.js/blob/master/lib/styles.js
var codes = {
  reset: [0, 0],

  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49]
};

var ansiColors = {};

var escapeString = function escapeString(str) {
  return str.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
};

Object.keys(codes).forEach(function (k) {
  var closeTag = '\x1B[' + codes[k][1] + 'm';
  ansiColors[k] = {
    name: k,
    value: codes[k],
    openTag: '\x1B[' + codes[k][0] + 'm',
    closeTag: closeTag,
    closeRegex: new RegExp(escapeString(closeTag), 'g')
  };
});

var getColor = function getColor(name) {
  return ansiColors[name] || {
    name: 'unknown', value: 'unknown', openTag: '', closeTag: ''
  };
};

var getColorsName = function getColorsName() {
  return Object.keys(ansiColors);
};
var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];
var getRainbowColor = function getRainbowColor(n) {
  return getColor(rainbowColors[n % rainbowColors.length]);
};

exports.getColor = getColor;
exports.getColorsName = getColorsName;
exports.getRainbowColor = getRainbowColor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2xvcnMvYW5zaS5qcyJdLCJuYW1lcyI6WyJjb2RlcyIsInJlc2V0IiwiYm9sZCIsImRpbSIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJoaWRkZW4iLCJzdHJpa2V0aHJvdWdoIiwiYmxhY2siLCJyZWQiLCJncmVlbiIsInllbGxvdyIsImJsdWUiLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwiZ3JheSIsImdyZXkiLCJiZ0JsYWNrIiwiYmdSZWQiLCJiZ0dyZWVuIiwiYmdZZWxsb3ciLCJiZ0JsdWUiLCJiZ01hZ2VudGEiLCJiZ0N5YW4iLCJiZ1doaXRlIiwiYW5zaUNvbG9ycyIsImVzY2FwZVN0cmluZyIsInN0ciIsInJlcGxhY2UiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImsiLCJjbG9zZVRhZyIsIm5hbWUiLCJ2YWx1ZSIsIm9wZW5UYWciLCJjbG9zZVJlZ2V4IiwiUmVnRXhwIiwiZ2V0Q29sb3IiLCJnZXRDb2xvcnNOYW1lIiwicmFpbmJvd0NvbG9ycyIsImdldFJhaW5ib3dDb2xvciIsIm4iLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0FBS0E7QUFDQSxJQUFNQSxRQUFRO0FBQ1pDLFNBQU8sQ0FBQyxDQUFELEVBQUksQ0FBSixDQURLOztBQUdaQyxRQUFNLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FITTtBQUlaQyxPQUFLLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FKTztBQUtaQyxVQUFRLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FMSTtBQU1aQyxhQUFXLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FOQztBQU9aQyxXQUFTLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FQRztBQVFaQyxVQUFRLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FSSTtBQVNaQyxpQkFBZSxDQUFDLENBQUQsRUFBSSxFQUFKLENBVEg7O0FBV1pDLFNBQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxDQVhLO0FBWVpDLE9BQUssQ0FBQyxFQUFELEVBQUssRUFBTCxDQVpPO0FBYVpDLFNBQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxDQWJLO0FBY1pDLFVBQVEsQ0FBQyxFQUFELEVBQUssRUFBTCxDQWRJO0FBZVpDLFFBQU0sQ0FBQyxFQUFELEVBQUssRUFBTCxDQWZNO0FBZ0JaQyxXQUFTLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FoQkc7QUFpQlpDLFFBQU0sQ0FBQyxFQUFELEVBQUssRUFBTCxDQWpCTTtBQWtCWkMsU0FBTyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBbEJLO0FBbUJaQyxRQUFNLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FuQk07QUFvQlpDLFFBQU0sQ0FBQyxFQUFELEVBQUssRUFBTCxDQXBCTTs7QUFzQlpDLFdBQVMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQXRCRztBQXVCWkMsU0FBTyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBdkJLO0FBd0JaQyxXQUFTLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0F4Qkc7QUF5QlpDLFlBQVUsQ0FBQyxFQUFELEVBQUssRUFBTCxDQXpCRTtBQTBCWkMsVUFBUSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBMUJJO0FBMkJaQyxhQUFXLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0EzQkM7QUE0QlpDLFVBQVEsQ0FBQyxFQUFELEVBQUssRUFBTCxDQTVCSTtBQTZCWkMsV0FBUyxDQUFDLEVBQUQsRUFBSyxFQUFMO0FBN0JHLENBQWQ7O0FBZ0NBLElBQU1DLGFBQWEsRUFBbkI7O0FBRUEsSUFBTUMsZUFBZSxTQUFmQSxZQUFlO0FBQUEsU0FBT0MsSUFBSUMsT0FBSixDQUFZLHFCQUFaLEVBQW1DLE1BQW5DLENBQVA7QUFBQSxDQUFyQjs7QUFFQUMsT0FBT0MsSUFBUCxDQUFZaEMsS0FBWixFQUFtQmlDLE9BQW5CLENBQTJCLFVBQUNDLENBQUQsRUFBTztBQUNoQyxNQUFNQyxxQkFBcUJuQyxNQUFNa0MsQ0FBTixFQUFTLENBQVQsQ0FBckIsTUFBTjtBQUNBUCxhQUFXTyxDQUFYLElBQWdCO0FBQ2RFLFVBQU1GLENBRFE7QUFFZEcsV0FBT3JDLE1BQU1rQyxDQUFOLENBRk87QUFHZEksdUJBQW1CdEMsTUFBTWtDLENBQU4sRUFBUyxDQUFULENBQW5CLE1BSGM7QUFJZEMsc0JBSmM7QUFLZEksZ0JBQVksSUFBSUMsTUFBSixDQUFXWixhQUFhTyxRQUFiLENBQVgsRUFBbUMsR0FBbkM7QUFMRSxHQUFoQjtBQU9ELENBVEQ7O0FBV0EsSUFBTU0sV0FBVyxTQUFYQSxRQUFXO0FBQUEsU0FBUWQsV0FBV1MsSUFBWCxLQUFvQjtBQUMzQ0EsVUFBTSxTQURxQyxFQUMxQkMsT0FBTyxTQURtQixFQUNSQyxTQUFTLEVBREQsRUFDS0gsVUFBVTtBQURmLEdBQTVCO0FBQUEsQ0FBakI7O0FBSUEsSUFBTU8sZ0JBQWdCLFNBQWhCQSxhQUFnQjtBQUFBLFNBQU1YLE9BQU9DLElBQVAsQ0FBWUwsVUFBWixDQUFOO0FBQUEsQ0FBdEI7QUFDQSxJQUFNZ0IsZ0JBQWdCLENBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsT0FBbEIsRUFBMkIsTUFBM0IsRUFBbUMsU0FBbkMsQ0FBdEI7QUFDQSxJQUFNQyxrQkFBa0IsU0FBbEJBLGVBQWtCO0FBQUEsU0FBS0gsU0FBU0UsY0FBY0UsSUFBSUYsY0FBY0csTUFBaEMsQ0FBVCxDQUFMO0FBQUEsQ0FBeEI7O1FBR0VMLFEsR0FBQUEsUTtRQUNBQyxhLEdBQUFBLGE7UUFDQUUsZSxHQUFBQSxlIiwiZmlsZSI6ImFuc2kuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgTHVjYXMgVGVza2Ugb24gMTgvMDUvMTguXG4gKiBAZmxvd1xuICovXG5cbi8vIENvbG9ycyBiYXNlZCBvZmYgY29sb3JzLmpzIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXJhay9jb2xvcnMuanMvYmxvYi9tYXN0ZXIvbGliL3N0eWxlcy5qc1xuY29uc3QgY29kZXMgPSB7XG4gIHJlc2V0OiBbMCwgMF0sXG5cbiAgYm9sZDogWzEsIDIyXSxcbiAgZGltOiBbMiwgMjJdLFxuICBpdGFsaWM6IFszLCAyM10sXG4gIHVuZGVybGluZTogWzQsIDI0XSxcbiAgaW52ZXJzZTogWzcsIDI3XSxcbiAgaGlkZGVuOiBbOCwgMjhdLFxuICBzdHJpa2V0aHJvdWdoOiBbOSwgMjldLFxuXG4gIGJsYWNrOiBbMzAsIDM5XSxcbiAgcmVkOiBbMzEsIDM5XSxcbiAgZ3JlZW46IFszMiwgMzldLFxuICB5ZWxsb3c6IFszMywgMzldLFxuICBibHVlOiBbMzQsIDM5XSxcbiAgbWFnZW50YTogWzM1LCAzOV0sXG4gIGN5YW46IFszNiwgMzldLFxuICB3aGl0ZTogWzM3LCAzOV0sXG4gIGdyYXk6IFs5MCwgMzldLFxuICBncmV5OiBbOTAsIDM5XSxcblxuICBiZ0JsYWNrOiBbNDAsIDQ5XSxcbiAgYmdSZWQ6IFs0MSwgNDldLFxuICBiZ0dyZWVuOiBbNDIsIDQ5XSxcbiAgYmdZZWxsb3c6IFs0MywgNDldLFxuICBiZ0JsdWU6IFs0NCwgNDldLFxuICBiZ01hZ2VudGE6IFs0NSwgNDldLFxuICBiZ0N5YW46IFs0NiwgNDldLFxuICBiZ1doaXRlOiBbNDcsIDQ5XSxcbn07XG5cbmNvbnN0IGFuc2lDb2xvcnMgPSB7fTtcblxuY29uc3QgZXNjYXBlU3RyaW5nID0gc3RyID0+IHN0ci5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgJ1xcXFwkJicpO1xuXG5PYmplY3Qua2V5cyhjb2RlcykuZm9yRWFjaCgoaykgPT4ge1xuICBjb25zdCBjbG9zZVRhZyA9IGBcXHUwMDFiWyR7Y29kZXNba11bMV19bWA7XG4gIGFuc2lDb2xvcnNba10gPSB7XG4gICAgbmFtZTogayxcbiAgICB2YWx1ZTogY29kZXNba10sXG4gICAgb3BlblRhZzogYFxcdTAwMWJbJHtjb2Rlc1trXVswXX1tYCxcbiAgICBjbG9zZVRhZyxcbiAgICBjbG9zZVJlZ2V4OiBuZXcgUmVnRXhwKGVzY2FwZVN0cmluZyhjbG9zZVRhZyksICdnJyksXG4gIH07XG59KTtcblxuY29uc3QgZ2V0Q29sb3IgPSBuYW1lID0+IGFuc2lDb2xvcnNbbmFtZV0gfHwge1xuICBuYW1lOiAndW5rbm93bicsIHZhbHVlOiAndW5rbm93bicsIG9wZW5UYWc6ICcnLCBjbG9zZVRhZzogJycsXG59O1xuXG5jb25zdCBnZXRDb2xvcnNOYW1lID0gKCkgPT4gT2JqZWN0LmtleXMoYW5zaUNvbG9ycyk7XG5jb25zdCByYWluYm93Q29sb3JzID0gWydyZWQnLCAneWVsbG93JywgJ2dyZWVuJywgJ2JsdWUnLCAnbWFnZW50YSddO1xuY29uc3QgZ2V0UmFpbmJvd0NvbG9yID0gbiA9PiBnZXRDb2xvcihyYWluYm93Q29sb3JzW24gJSByYWluYm93Q29sb3JzLmxlbmd0aF0pO1xuXG5leHBvcnQge1xuICBnZXRDb2xvcixcbiAgZ2V0Q29sb3JzTmFtZSxcbiAgZ2V0UmFpbmJvd0NvbG9yLFxufTtcbiJdfQ==